# ATALANTA Web GUI Production Docker Image
# Multi-stage build with security best practices and optimizations

# Stage 1: Build the Atalanta binary
FROM ubuntu:20.04 as atalanta-builder

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Install only necessary build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    g++ \
    gcc \
    make \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create build directory
WORKDIR /build

# Copy only necessary source files for Atalanta
COPY *.cpp *.h makefile ./

# Fix makefile for modern g++ compiler
RUN sed -i 's/CC=cc/CC=g++/' makefile && \
    sed -i 's/CFLAGS = -O -g/CFLAGS = -O2 -g -fpermissive -Wno-write-strings/' makefile

# Build Atalanta with optimizations
RUN make clean 2>/dev/null || true && \
    make atalanta || ( \
        sed -i 's/g++ $(CFLAGS)/g++ $(CFLAGS) -std=c++98/' makefile && \
        make clean && make atalanta \
    )

# Stage 2: Build the Next.js application
FROM node:18-alpine as web-builder

# Set working directory
WORKDIR /app

# Copy package files
COPY web/package*.json ./

# Install dependencies with clean npm cache
RUN npm ci --only=production && \
    npm cache clean --force

# Copy source code
COPY web/ ./

# Build the Next.js application
RUN npm run build

# Stage 3: Production runtime
FROM node:18-alpine

# Install security updates and runtime dependencies
RUN apk update && apk upgrade && \
    apk add --no-cache \
    bash \
    curl \
    dumb-init \
    && rm -rf /var/cache/apk/*

# Create non-root user with specific UID/GID for security
RUN addgroup -g 1001 -S atalanta && \
    adduser -S atalanta -u 1001 -G atalanta

# Set environment variables
ENV NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1 \
    ATALANTA_HOME=/opt/atalanta \
    PATH="${PATH}:/opt/atalanta/bin" \
    WORKSPACE=/workspace \
    PORT=3000

# Create directories with proper permissions
RUN mkdir -p /opt/atalanta/bin /workspace/circuits /workspace/outputs /workspace/work /app && \
    chown -R atalanta:atalanta /opt/atalanta /workspace /app

# Copy Atalanta binary from builder stage
COPY --from=atalanta-builder --chown=atalanta:atalanta /build/atalanta /opt/atalanta/bin/atalanta

# Copy Next.js application from builder stage
COPY --from=web-builder --chown=atalanta:atalanta /app/.next /app/.next
COPY --from=web-builder --chown=atalanta:atalanta /app/node_modules /app/node_modules
COPY --from=web-builder --chown=atalanta:atalanta /app/package*.json /app/
COPY --from=web-builder --chown=atalanta:atalanta /app/server.js /app/

# Copy startup scripts
COPY --chown=atalanta:atalanta docker/entrypoint.sh /opt/atalanta/entrypoint.sh
COPY --chown=atalanta:atalanta docker/healthcheck.sh /opt/atalanta/healthcheck.sh

# Make scripts executable
RUN chmod +x /opt/atalanta/entrypoint.sh /opt/atalanta/healthcheck.sh

# Switch to non-root user
USER atalanta

# Set working directory
WORKDIR /workspace

# Expose port
EXPOSE 3000

# Add health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD /opt/atalanta/healthcheck.sh

# Use dumb-init to handle signals properly
ENTRYPOINT ["/usr/bin/dumb-init", "--", "/opt/atalanta/entrypoint.sh"]

# Default command
CMD ["web"]